# file opened: src/main.asm
  1   0000 FE               db   0FEh               ; ID archivo binario, siempre hay que poner el mismo 0FEh
  2   0001 00 82            dw   INICIO             ; dirección de inicio
  3   0003 4C 82            dw   FINAL - 1          ; dirección final
  4   0005 00 82            dw   MAIN               ; dircción del programa de ejecución (para cuando pongas r en bload"nombre_programa", r)
  5   0007
  6   0007
  7   0007
  8   0007                  org 33280               ; org se utiliza para decirle al z80 en que posición de memoria empieza nuestro programa (es la 33280 en decimal), en hezadecimal sería #8200
  9   8200
 10   8200              INICIO:
 11   8200
 12   8200              MAIN:
 13   8200 CD CC 00         call ERAFNK         ; Borramos las teclas
 14   8203 CD C3 00         call BCLS           ; Rutinas de consola, borra la pantalla
 15   8206 CD D2 00         call TOTEXT         ; ponemos el screen en screen mode
 16   8209 21 39 82         ld  hl,mensaje      ; Almacena en los registro hl del z80 la dirección donde está la variable con el texto.
 17   820C CD 2F 82         call Print          ; llama a la rutina o método.
 18   820F CD 1D 82         call sumar_uno
 19   8212 CD 1D 82         call sumar_uno
 20   8215 CD 1D 82         call sumar_uno
 21   8218 CD 26 82         call ver_resultado_suma
 22   821B 18 FE            jr $                ;bucle infinito
 23   821D
 24   821D              sumar_uno:
 25   821D 3A 38 82         ld a,(direccion_memoria_sumar)
 26   8220 C6 01            add a,1
 27   8222 32 38 82         ld (direccion_memoria_sumar),a
 28   8225 C9               ret
 29   8226              ver_resultado_suma:
 30   8226 3A 38 82         ld a,(direccion_memoria_sumar)
 31   8229 C6 30            add a,48
 32   822B CD A2 00         call CHPUT
 33   822E C9               ret
 34   822F
 35   822F              ;método print
 36   822F              Print:
 37   822F 7E               ld  a,(hl)          ; Lee el 1 byte de la dirección de la memoria indicada y lo almacena en el registro a del z80.
 38   8230 A7               and a               ; Actualiza la bandera z del registro F del z80 y la pone en 0 si no hay valor, and a también actualiza el flag c, p, v y s.
 39   8231 C8               ret z               ; Devuelve el cotrol al Main si la bandera z del registro F del z80 es 0
 40   8232 CD A2 00         call CHPUT          ; Llama a la subrutina 0042h de la Bios la cual imprime el caracter almacenado en el registro a del z80
 41   8235 23               inc hl              ; incrementa el puntero de los registros hl para que señale al siguiente byte
 42   8236 18 F7            jr Print            ; Llama al métdo print para que lo vuelva a ejecutar
 43   8238
 44   8238
 45   8238
 46   8238 00           direccion_memoria_sumar db 0
 47   8239 48 6F 6C 61  mensaje: db "Hola MSX Murcia!!! ",0	; Crea una dirección en la memoria con la etiqueta mensaje, el cero indica el fin del texto
 47   823D 20 4D 53 58
 47   8241 20 4D 75 72
 47   8245 63 69 61 21
 47   8249 21 21 20 00
 48   824D
 49   824D                  include "vars_msxBios.asm"
# file opened: src/vars_msxBios.asm
  1+  824D
  2+  824D              ;http://map.grauw.nl/resources/msxbios.php
  3+  824D              ; use RST assembler mnemonic to call
  4+  824D              CHKRAM equ 0x00 ; RST 0x00 > Check RAM and sets slot for command area.
  5+  824D              SYNCHR equ 0x08 ; RST	0x08 > Checks if then current character pointed by HL is one desired.
  6+  824D              CHRGTR equ 0x10 ; RST	0x10 > Gets the next character (or token) of the Basic-text
  7+  824D              OUTDO  equ 0x18 ; RST	0x18 > Output to current outputchannel (printer, diskfile, etc.)
  8+  824D              DCOMPR equ 0x20 ; RST	0x20 > Compares HL with DE
  9+  824D              GETYPR equ 0x28 ; RST	0x28 > Returns Type of DAC
 10+  824D              CALLF  equ 0x30 ; RST	0x30 > Executes an interslot call
 11+  824D              KEYINT equ 0x38 ; RST	0x38 > Executes the timer interrupt process routine
 12+  824D
 13+  824D              ; use CALL assembler mnemonic
 14+  824D              RDSLT  equ 0x000C ; Reads the value of an address in another slot
 15+  824D              WRSLT  equ 0x0014 ; Writes a value to an address in another slot
 16+  824D              CALSLT equ 0x001C ; Executes inter-slot call
 17+  824D              ENASLT equ 0x0024 ; Switches indicated slot at indicated page on perpetual
 18+  824D
 19+  824D              ; Initialization-routines
 20+  824D              INITIO equ 0x003B ; Initialises the device
 21+  824D              INIFNK equ 0x003E ; Initialises the contents of the function keys
 22+  824D
 23+  824D              ; VDP routines
 24+  824D              DISSCR equ 0x0041 ; inhibits the screen display
 25+  824D              ENASCR equ 0x0044 ; displays the screen
 26+  824D              WRTVDP equ 0x0047 ; write data in the VDP-register
 27+  824D              RDVRM  equ 0x004A ; Reads the content of VRAM
 28+  824D              WRTVRM equ 0x004D ; Writes data in VRAM
 29+  824D              SETRD  equ 0x0050 ; Enable VDP to read
 30+  824D              SETWRT equ 0x0053 ; Enable VDP to write
 31+  824D              FILVRM equ 0x0056 ; fill VRAM with value
 32+  824D              LDIRMV equ 0x0059 ; Block transfer to memory from VRAM
 33+  824D              LDIRVM equ 0x005C ; Block transfer to VRAM from memory
 34+  824D              CHGMOD equ 0x005F ; Switches to given screenmode
 35+  824D              CHGCLR equ 0x0062 ; Changes the screencolors
 36+  824D              CLRSPR equ 0x0069 ; Initialises all sprites
 37+  824D              INITXT equ 0x006C ; Switches to SCREEN 0 (text screen with 40 * 24 characters)
 38+  824D              INIT32 equ 0x006F ; Switches to SCREEN 1 (text screen with 32*24 characters)
 39+  824D              INIGRP equ 0x0072 ; Switches to SCREEN 2 (high resolution screen with 256*192 pixels)
 40+  824D              INIMLT equ 0x0075 ; Switches to SCREEN 3 (multi-color screen 64*48 pixels)
 41+  824D              SETTXT equ 0x0078 ; Switches to VDP in SCREEN 0 mode
 42+  824D              SETT32 equ 0x007B ; Switches VDP in SCREEN mode 1
 43+  824D              SETGRP equ 0x007E ; Switches VDP to SCREEN 2 mode
 44+  824D              SETMLT equ 0x0081 ; Switches VDP to SCREEN 3 mode
 45+  824D              CALPAT equ 0x0084 ; Returns the address of the sprite pattern table
 46+  824D              CALATR equ 0x0087 ; Returns the address of the sprite attribute table
 47+  824D              GSPSIZ equ 0x008A ; Returns current sprite size
 48+  824D              GRPPRT equ 0x008D ; Displays a character on the graphic screen
 49+  824D
 50+  824D              ; PSG routines
 51+  824D              GICINI equ 0x0090 ; Initialises PSG and sets initial value for the PLAY statement
 52+  824D              WRTPSG equ 0x0093 ; Writes data to PSG-register
 53+  824D              RDPSG  equ 0x0096 ; Reads value from PSG-register
 54+  824D              STRTMS equ 0x0099 ; Tests whether the PLAY statement is being executed as a background task. If not, begins to execute the PLAY statement  */
 55+  824D
 56+  824D              ; Console routines, rutinas de consola
 57+  824D              CHSNS  equ 0x009C ; Tests the status of the keyboard buffer
 58+  824D              CHGET  equ 0x009F ; One character input (waiting)
 59+  824D              CHPUT  equ 0x00A2 ; Displays one character
 60+  824D              LPTOUT equ 0x00A5 ; Sends one character to printer
 61+  824D              LPTSTT equ 0x00A8 ; Tests printer status
 62+  824D              CNVCHR equ 0x00AB ; tests for the graphic header and transforms the code
 63+  824D              PINLIN equ 0x00AE ; Stores in the specified buffer the character codes input until the return key or STOP key is pressed     */
 64+  824D              INLIN  equ 0x00B1 ; Same as PINLIN except that AUGFLG (#F6AA) is set
 65+  824D              QINLIN equ 0x00B4 ; Prints a questionmark andone space
 66+  824D              BREAKX equ 0x00B7 ; Tests status of CTRL-STOP
 67+  824D              ISCNTC equ 0x00BA ; Tests status of SHIFT-STOP
 68+  824D              CKCNTC equ 0x00BD ; Same as ISCNTC. used in Basic
 69+  824D              BEEP   equ 0x00C0 ; generates beep
 70+  824D              BCLS   equ 0x00C3 ; Clears the screen
 71+  824D              POSIT  equ 0x00C6 ; Places the cursor at the specified location
 72+  824D              FNKSB  equ 0x00C9 ; Tests whether the function key display is active (FNKFLG)If so, displays them, otherwise erase them */
 73+  824D              ERAFNK equ 0x00CC ; Erase functionkey display
 74+  824D              DSPFNK equ 0x00CF ; Displays the function keys
 75+  824D              TOTEXT equ 0x00D2 ; Forces the screen to be in the text mode
 76+  824D
 77+  824D              ; Controller routines
 78+  824D              GTSTCK equ 0x00D5 ; Returns the joystick status
 79+  824D              GTTRIG equ 0x00D8 ; Returns current trigger status
 80+  824D              GTPAD  equ 0x00DB ; Returns current touch pad status
 81+  824D              GTPDL  equ 0x00DE ; Returns currenct value of paddle
 82+  824D
 83+  824D              ; Tape device routines
 84+  824D              TAPION equ 0x00E1 ; Reads the header block after turning the cassette motor on
 85+  824D              TAPIN  equ 0x00E4 ; Read data from the tape
 86+  824D              TAPIOF equ 0x00E7 ; Stops reading from the tape
 87+  824D              TAPOON equ 0x00EA ; Turns on the cassette motor and writes the header
 88+  824D              TAPOUT equ 0x00ED ; Writes data on the tape
 89+  824D              TAPOOF equ 0x00F0 ; Stops writing on the tape
 90+  824D              STMOTR equ 0x00F3 ; Sets the cassette motor action
 91+  824D
 92+  824D              ; Queue routines
 93+  824D              LFTQ equ 0x00F6 ; Gives number of bytes in queue
 94+  824D              PUTQ equ 0x00F9 ; Put byte in queue
 95+  824D
 96+  824D              ; Graphic routines
 97+  824D              ;More info (MSX Assembly Page): http:;map.grauw.nl/resources/msxbios.php
 98+  824D              RIGHTC equ 0x00FC ; Shifts screenpixel to the right
 99+  824D              LEFTC  equ 0x00FF ; Shifts screenpixel to the left
100+  824D              UPC    equ 0x0102 ; Shifts screenpixel up
101+  824D              TUPC   equ 0x0105 ; Tests whether UPC is possible, if possible, execute UPC
102+  824D              DOWNC  equ 0x0108 ; Shifts screenpixel down
103+  824D              TDOWNC equ 0x010B ; Tests whether DOWNC is possible, if possible, execute DOWNC
104+  824D              SCALXY equ 0x010E ; Scales X and Y coordinates
105+  824D              MAPXY  equ 0x0111 ; Places cursor at current cursor address
106+  824D              FETCHC equ 0x0114 ; Gets current cursor addresses mask pattern
107+  824D              STOREC equ 0x0117 ; Record current cursor addresses mask pattern
108+  824D              SETATR equ 0x011A ; Set attribute byte
109+  824D              READC  equ 0x011E ; Reads attribute byte of current screenpixel
110+  824D              SETC   equ 0x0120 ; Returns currenct screenpixel of specificed attribute byte
111+  824D              NSETCX equ 0x0123 ; Set horizontal screenpixels
112+  824D              GTASPC equ 0x0126 ; Gets screen relations
113+  824D              PNTINI equ 0x0129 ; Initalises the PAINT instruction
114+  824D              SCANR  equ 0x012C ; Scans screenpixels to the right
115+  824D              SCANL  equ 0x012F ; Scans screenpixels to the left
116+  824D
117+  824D              ; Graphic routines MSX2
118+  824D              ;More info (MSX Assembly Page): http:;map.grauw.nl/resources/msxbios.php#msx2bios
119+  824D              CHKNEW equ 0x0165 ;Tests screen mode > C-flag set if screenmode = 5, 6, 7 or 8
120+  824D              BIGFIL equ 0x016B ;fill VRAM with value (total VRAM can be reached) HL address, BC length, A data
121+  824D              NSETRD equ 0x016E ;Enable VDP to read.(with full 16 bits VRAM-address)
122+  824D              NSTWRT equ 0x0171 ;Enable VDP to write.(with full 16 bits VRAM-address)
123+  824D              NRDVRM equ 0x0174 ;Reads VRAM like in RDVRM.(with full 16 bits VRAM-address)
124+  824D              NWRVRM equ 0x0177 ;Writes to VRAM like in WRTVRM.(with full 16 bits VRAM-address)
125+  824D
126+  824D
127+  824D              ; Misc routines
128+  824D              CHGCAP equ 0x0132 ; Alternates the CAP lamp status
129+  824D              CHGSND equ 0x0135 ; Alternates the 1-bit sound port status
130+  824D              RSLREG equ 0x0138 ; Reads the primary slot register
131+  824D              WSLREG equ 0x013B ; Writes value to the primary slot register
132+  824D              RDVDP  equ 0x013E ; Reads VDP status register
133+  824D              SNSMAT equ 0x0141 ; Returns the value of the specified line from the keyboard matrix
134+  824D              ; 0   1          2           3           4           5           6           7           8       9       10
135+  824D              ;0    1          2                      4           5           6
136+  824D              ;1   ; fin grabr ' grabar                                                    Ñ
137+  824D              ;2                                      \grabar2  DEADfingrabar2 A           B
138+  824D              ;3 C                        F           G           H
139+  824D              ;4                          N
140+  824D              ;5 S                        V                       X                       Z
141+  824D              ;6SHIFtONTROL    GRAPH      CAPS        CODE
142+  824D              ;7              ESCAPE                              BS                      RET
143+  824D              ;8                                               Cursor ^    Cursor v
144+  824D              PHYDIO equ 0x0144 ; Executes I/O for mass-storage media like diskettes
145+  824D              FORMAT equ 0x0147 ; Initialises mass-storage media like formatting of diskettes
146+  824D              ISFLIO equ 0x014A ; Tests if I/O to device is taking place
147+  824D              OUTDLP equ 0x014E ; Printer output
148+  824D              GETVCP equ 0x0150 ; Returns pointer to play queue
149+  824D              GETVC2 equ 0x0153 ; Returns pointer to variable in queue number VOICEN (byte op #FB38)
150+  824D              KILBUF equ 0x0156 ; Clear keyboard buffer
151+  824D              CALBAS equ 0x0159 ; Executes inter-slot call to the routine in BASIC interpreter
152+  824D
153+  824D
# file closed: src/vars_msxBios.asm
 50   824D
 51   824D
 52   824D
 53   824D
 54   824D
 55   824D
 56   824D
 57   824D              FINAL:
# file closed: src/main.asm
